import { SvelteComponent, init, safe_not_equal, create_slot, element, attr, insert, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach, text } from 'svelte/internal';
import { createEventDispatcher } from 'svelte';

/* src\Clipboard.svelte generated by Svelte v3.42.5 */

function fallback_block(ctx) {
	let t;

	return {
		c() {
			t = text("Just a filler");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	const default_slot_or_fallback = default_slot || fallback_block();

	return {
		c() {
			div = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(div, "class", div_class_value = "clip__ " + /*className*/ ctx[1]);
			attr(div, "data-clipboard-text", /*value*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*className*/ 2 && div_class_value !== (div_class_value = "clip__ " + /*className*/ ctx[1])) {
				attr(div, "class", div_class_value);
			}

			if (!current || dirty & /*value*/ 1) {
				attr(div, "data-clipboard-text", /*value*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value } = $$props;
	let { class: className } = $$props;
	const dispatch = createEventDispatcher();
	onMount(() => console.log("Simple"));
	var clipboard = new ClipboardJS('.clip__');

	clipboard.on('success', function (e) {
		console.info('Action:', e.action);
		console.info('Text:', e.text);
		console.info('Trigger:', e.trigger);
		dispatch("copied");
		e.clearSelection();
	});

	clipboard.on('error', function (e) {
		console.error('Action:', e.action);
		console.error('Trigger:', e.trigger);
		dispatch("error");
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('class' in $$props) $$invalidate(1, className = $$props.class);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [value, className, $$scope, slots];
}

class Clipboard extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { value: 0, class: 1 });
	}
}

export { Clipboard as default };
